{
	"info": {
		"_postman_id": "order-management-test-collection",
		"name": "Order Management API Test",
		"description": "Comprehensive test collection for Order Management APIs (COD)\n\nüéØ **Test Flow:**\n1. Authentication (Login)\n2. Setup test data (Category, Shop, Product)\n3. Cart operations (Add items)\n4. Checkout process (Create order with COD)\n5. Order management (View, update status)\n6. Seller operations\n7. Admin operations\n\nüìã **Prerequisites:**\n- Database running\n- Application started\n- Sample data initialized",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data && responseJson.data.accessToken) {",
									"        pm.environment.set('accessToken', responseJson.data.accessToken);",
									"        pm.environment.set('userId', responseJson.data.userId);",
									"        console.log('‚úÖ User login successful');",
									"        console.log('Access Token:', responseJson.data.accessToken);",
									"        console.log('User ID:', responseJson.data.userId);",
									"    }",
									"}",
									"",
									"pm.test('User login successful', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@simplecommerce.com\",\n  \"password\": \"user123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Seller Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data && responseJson.data.accessToken) {",
									"        pm.environment.set('sellerAccessToken', responseJson.data.accessToken);",
									"        pm.environment.set('sellerId', responseJson.data.userId);",
									"        console.log('‚úÖ Seller login successful');",
									"        console.log('Seller Token:', responseJson.data.accessToken);",
									"    }",
									"}",
									"",
									"pm.test('Seller login successful', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"seller@simplecommerce.com\",\n  \"password\": \"seller123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data && responseJson.data.accessToken) {",
									"        pm.environment.set('adminAccessToken', responseJson.data.accessToken);",
									"        pm.environment.set('adminId', responseJson.data.userId);",
									"        console.log('‚úÖ Admin login successful');",
									"        console.log('Admin Token:', responseJson.data.accessToken);",
									"    }",
									"}",
									"",
									"pm.test('Admin login successful', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@simplecommerce.com\",\n  \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìã Setup Test Data",
			"item": [
				{
					"name": "Get Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data && responseJson.data.length > 0) {",
									"        pm.environment.set('categoryId', responseJson.data[0].id);",
									"        console.log('‚úÖ Category ID set:', responseJson.data[0].id);",
									"    }",
									"}",
									"",
									"pm.test('Categories retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product (Seller)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data && responseJson.data.id) {",
									"        pm.environment.set('productId', responseJson.data.id);",
									"        console.log('‚úÖ Product created:', responseJson.data.id);",
									"        console.log('Product name:', responseJson.data.name);",
									"        ",
									"        // Extract variant ID if variants exist",
									"        if (responseJson.data.variants && responseJson.data.variants.length > 0) {",
									"            pm.environment.set('variantId', responseJson.data.variants[0].id);",
									"            console.log('‚úÖ Variant ID set:', responseJson.data.variants[0].id);",
									"        }",
									"    }",
									"}",
									"",
									"pm.test('Product created successfully', function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{sellerAccessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"iPhone 15 Pro Max Test\",\n  \"description\": \"Latest iPhone model for testing order system\",\n  \"categoryId\": {{categoryId}},\n  \"basePrice\": 30000000,\n  \"isFeatured\": true,\n  \"variants\": [\n    {\n      \"sku\": \"IPHONE15-PRO-MAX-256-BLUE\",\n      \"variantOptions\": \"256GB, Natural Blue\",\n      \"price\": 30000000,\n      \"stockQuantity\": 50\n    },\n    {\n      \"sku\": \"IPHONE15-PRO-MAX-512-BLACK\",\n      \"variantOptions\": \"512GB, Space Black\",\n      \"price\": 35000000,\n      \"stockQuantity\": 30\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/seller/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"seller",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve Product (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Product approved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Product approved and ready for ordering');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminAccessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"APPROVED\",\n  \"reviewNotes\": \"Product approved for testing order system\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/admin/products/{{productId}}/approval",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"products",
								"{{productId}}",
								"approval"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üõí Cart Operations",
			"item": [
				{
					"name": "Clear Cart (if exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cart cleared or was empty', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"console.log('üóëÔ∏è Cart cleared for fresh testing');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/cart",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Item to Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Item added to cart successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Item added to cart');",
									"    console.log('Cart total items:', responseJson.data.totalItems);",
									"    console.log('Cart subtotal:', responseJson.data.subtotal);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"variantId\": {{variantId}},\n  \"quantity\": 2\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/cart/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cart",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cart retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('üõí Current cart status:');",
									"    console.log('Total items:', responseJson.data.totalItems);",
									"    console.log('Total quantity:', responseJson.data.totalQuantity);",
									"    console.log('Subtotal:', responseJson.data.subtotal, 'VND');",
									"    console.log('Has items:', !responseJson.data.isEmpty);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/cart",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cart"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üõçÔ∏è Order Management - User",
			"item": [
				{
					"name": "Checkout (Create Order with COD)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Order created successfully', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data) {",
									"        pm.environment.set('masterOrderId', responseJson.data.id);",
									"        pm.environment.set('orderGroupNumber', responseJson.data.orderGroupNumber);",
									"        ",
									"        // Get first order ID",
									"        if (responseJson.data.orders && responseJson.data.orders.length > 0) {",
									"            pm.environment.set('orderId', responseJson.data.orders[0].id);",
									"            pm.environment.set('orderNumber', responseJson.data.orders[0].orderNumber);",
									"        }",
									"        ",
									"        console.log('üéâ ORDER CREATED SUCCESSFULLY!');",
									"        console.log('Master Order ID:', responseJson.data.id);",
									"        console.log('Order Group Number:', responseJson.data.orderGroupNumber);",
									"        console.log('Total Amount:', responseJson.data.totalAmountPaid, 'VND');",
									"        console.log('Payment Method:', responseJson.data.paymentMethodSnapshot);",
									"        console.log('Overall Status:', responseJson.data.overallStatus);",
									"        console.log('Number of shops:', responseJson.data.totalOrders);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"shippingAddress\": \"123 Nguy·ªÖn VƒÉn C·ª´, Ph∆∞·ªùng 1, Qu·∫≠n 1, TP.HCM\",\n  \"billingAddress\": \"123 Nguy·ªÖn VƒÉn C·ª´, Ph∆∞·ªùng 1, Qu·∫≠n 1, TP.HCM\",\n  \"customerPhone\": \"+84901234567\",\n  \"notesToSeller\": \"Giao h√†ng bu·ªïi chi·ªÅu sau 2PM. G·ªçi tr∆∞·ªõc 15 ph√∫t.\",\n  \"paymentMethodCode\": \"COD\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User orders retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('üìã User Order History:');",
									"    console.log('Total pages:', responseJson.data.totalPages);",
									"    console.log('Total orders:', responseJson.data.totalElements);",
									"    console.log('Orders on this page:', responseJson.data.content.length);",
									"    ",
									"    if (responseJson.data.content.length > 0) {",
									"        responseJson.data.content.forEach((order, index) => {",
									"            console.log(`Order ${index + 1}:`, order.orderNumber, '- Status:', order.orderStatus, '- Total:', order.totalAmount, 'VND');",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/orders?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Order details retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('üìÑ Order Details:');",
									"    console.log('Order Number:', responseJson.data.orderNumber);",
									"    console.log('Shop:', responseJson.data.shopName);",
									"    console.log('Status:', responseJson.data.orderStatus);",
									"    console.log('Total Amount:', responseJson.data.totalAmount, 'VND');",
									"    console.log('Shipping Fee:', responseJson.data.shippingFee, 'VND');",
									"    console.log('Order Items:', responseJson.data.totalItems);",
									"    console.log('Total Quantity:', responseJson.data.totalQuantity);",
									"    console.log('Notes to Seller:', responseJson.data.notesToSeller);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/orders/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Master Order Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Master order details retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('üìã Master Order Details:');",
									"    console.log('Order Group Number:', responseJson.data.orderGroupNumber);",
									"    console.log('Customer Email:', responseJson.data.customerEmail);",
									"    console.log('Overall Status:', responseJson.data.overallStatus);",
									"    console.log('Total Amount Paid:', responseJson.data.totalAmountPaid, 'VND');",
									"    console.log('Payment Method:', responseJson.data.paymentMethodSnapshot);",
									"    console.log('Number of Orders:', responseJson.data.totalOrders);",
									"    console.log('Total Items:', responseJson.data.totalItems);",
									"    console.log('Shipping Address:', responseJson.data.shippingAddressSnapshot);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/orders/master/{{masterOrderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								"master",
								"{{masterOrderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Order cancel request processed', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Order cancelled successfully');",
									"} else if (pm.response.code === 400) {",
									"    console.log('‚ùå Order cannot be cancelled (probably already processed)');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/orders/{{orderId}}/cancel?reason=Changed my mind, want to cancel this order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders",
								"{{orderId}}",
								"cancel"
							],
							"query": [
								{
									"key": "reason",
									"value": "Changed my mind, want to cancel this order"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üè™ Order Management - Seller",
			"item": [
				{
					"name": "Get Seller Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Seller orders retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('üè™ Seller Order Management:');",
									"    console.log('Total orders:', responseJson.data.totalElements);",
									"    console.log('Orders on this page:', responseJson.data.content.length);",
									"    ",
									"    if (responseJson.data.content.length > 0) {",
									"        responseJson.data.content.forEach((order, index) => {",
									"            console.log(`Order ${index + 1}:`, order.orderNumber, '- Status:', order.orderStatus, '- Customer:', order.customerEmail);",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{sellerAccessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/seller/orders?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"seller",
								"orders"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Orders Awaiting Confirmation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Awaiting confirmation orders retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚è≥ Orders Awaiting Confirmation:');",
									"    console.log('Total pending:', responseJson.data.totalElements);",
									"    ",
									"    if (responseJson.data.content.length > 0) {",
									"        responseJson.data.content.forEach((order, index) => {",
									"            console.log(`Pending ${index + 1}:`, order.orderNumber, '- Total:', order.totalAmount, 'VND');",
									"        });",
									"    } else {",
									"        console.log('No orders awaiting confirmation');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{sellerAccessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/seller/orders?status=AWAITING_CONFIRMATION",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"seller",
								"orders"
							],
							"query": [
								{
									"key": "status",
									"value": "AWAITING_CONFIRMATION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Order (AWAITING_CONFIRMATION ‚Üí PROCESSING)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Order status updated successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Order confirmed by seller');",
									"    console.log('New status:', responseJson.data.orderStatus);",
									"    console.log('Order number:', responseJson.data.orderNumber);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{sellerAccessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orderStatus\": \"PROCESSING\",\n  \"internalNotes\": \"Order confirmed by seller. Preparing items for shipment.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/seller/orders/{{orderId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"seller",
								"orders",
								"{{orderId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update to Shipped",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Order shipped successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('üöö Order shipped');",
									"    console.log('Status:', responseJson.data.orderStatus);",
									"    console.log('Order number:', responseJson.data.orderNumber);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{sellerAccessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orderStatus\": \"SHIPPED\",\n  \"internalNotes\": \"Order shipped via Viettel Post. Tracking: VTP123456789\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/seller/orders/{{orderId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"seller",
								"orders",
								"{{orderId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark as Delivered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Order delivered successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('üì¶ Order delivered');",
									"    console.log('Status:', responseJson.data.orderStatus);",
									"    console.log('Order number:', responseJson.data.orderNumber);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{sellerAccessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orderStatus\": \"DELIVERED\",\n  \"internalNotes\": \"Order delivered successfully. Customer received and confirmed.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/seller/orders/{{orderId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"seller",
								"orders",
								"{{orderId}}",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üëë Order Management - Admin",
			"item": [
				{
					"name": "Get All Orders (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('All orders retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('üëë Admin: All Orders Overview');",
									"    console.log('Total orders in system:', responseJson.data.totalElements);",
									"    console.log('Orders on this page:', responseJson.data.content.length);",
									"    ",
									"    if (responseJson.data.content.length > 0) {",
									"        responseJson.data.content.forEach((order, index) => {",
									"            console.log(`${index + 1}. ${order.orderNumber} - ${order.customerEmail} - ${order.orderStatus} - ${order.totalAmount} VND`);",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminAccessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/admin/orders?page=0&size=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Order search completed', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('üîç Admin Search Results:');",
									"    console.log('Search term: user@simplecommerce.com');",
									"    console.log('Found orders:', responseJson.data.totalElements);",
									"    ",
									"    if (responseJson.data.content.length > 0) {",
									"        responseJson.data.content.forEach((order, index) => {",
									"            console.log(`${index + 1}. ${order.orderNumber} - ${order.customerEmail} - ${order.orderStatus}`);",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminAccessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/admin/orders/search?keyword=user@simplecommerce.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"search"
							],
							"query": [
								{
									"key": "keyword",
									"value": "user@simplecommerce.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Order statistics retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('üìä Order Statistics Dashboard:');",
									"    console.log('=====================================');",
									"    console.log('Total Orders:', responseJson.data.totalOrders);",
									"    console.log('Pending Payment:', responseJson.data.pendingOrders);",
									"    console.log('Awaiting Confirmation:', responseJson.data.awaitingConfirmationOrders);",
									"    console.log('Processing:', responseJson.data.processingOrders);",
									"    console.log('Shipped:', responseJson.data.shippedOrders);",
									"    console.log('Delivered:', responseJson.data.deliveredOrders);",
									"    console.log('Completed:', responseJson.data.completedOrders);",
									"    console.log('Cancelled:', responseJson.data.cancelledOrders);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminAccessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/admin/orders/statistics",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"statistics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Override Order Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Admin status override successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('üëë Admin Override Applied');",
									"    console.log('Order:', responseJson.data.orderNumber);",
									"    console.log('New Status:', responseJson.data.orderStatus);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminAccessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orderStatus\": \"COMPLETED\",\n  \"internalNotes\": \"Admin override: Marking order as completed for testing purposes\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/admin/orders/{{orderId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"orders",
								"{{orderId}}",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîÑ Order Flow Test",
			"item": [
				{
					"name": "Full Order Flow - Create New Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('New order created for flow test', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data && responseJson.data.orders && responseJson.data.orders.length > 0) {",
									"        pm.environment.set('flowTestOrderId', responseJson.data.orders[0].id);",
									"        console.log('üîÑ FLOW TEST ORDER CREATED');",
									"        console.log('Order ID for flow test:', responseJson.data.orders[0].id);",
									"        console.log('Status:', responseJson.data.orders[0].orderStatus);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Add another item to cart for flow test",
									"pm.sendRequest({",
									"    url: pm.environment.get('baseUrl') + '/api/v1/cart/items',",
									"    method: 'POST',",
									"    header: {",
									"        'Authorization': 'Bearer ' + pm.environment.get('accessToken'),",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            variantId: parseInt(pm.environment.get('variantId')),",
									"            quantity: 1",
									"        })",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.log('Error adding item to cart:', err);",
									"    } else {",
									"        console.log('‚úÖ Item added to cart for flow test');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"shippingAddress\": \"456 L√™ Lai, Ph∆∞·ªùng 2, Qu·∫≠n 3, TP.HCM\",\n  \"billingAddress\": \"456 L√™ Lai, Ph∆∞·ªùng 2, Qu·∫≠n 3, TP.HCM\",\n  \"customerPhone\": \"+84907654321\",\n  \"notesToSeller\": \"ƒê∆°n h√†ng test flow. Giao h√†ng bu·ªïi s√°ng.\",\n  \"paymentMethodCode\": \"COD\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Test - Seller Confirms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Flow test - Order confirmed', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('üîÑ Flow Step 1: Order confirmed by seller ‚úÖ');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{sellerAccessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orderStatus\": \"PROCESSING\",\n  \"internalNotes\": \"Flow test: Order confirmed\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/seller/orders/{{flowTestOrderId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"seller",
								"orders",
								"{{flowTestOrderId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Test - Ship Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Flow test - Order shipped', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('üîÑ Flow Step 2: Order shipped ‚úÖ');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{sellerAccessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orderStatus\": \"SHIPPED\",\n  \"internalNotes\": \"Flow test: Order shipped\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/seller/orders/{{flowTestOrderId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"seller",
								"orders",
								"{{flowTestOrderId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Test - Deliver Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Flow test - Order delivered', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('üîÑ Flow Step 3: Order delivered ‚úÖ');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{sellerAccessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orderStatus\": \"DELIVERED\",\n  \"internalNotes\": \"Flow test: Order delivered successfully\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/seller/orders/{{flowTestOrderId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"seller",
								"orders",
								"{{flowTestOrderId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flow Test - Complete Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Flow test - Order completed', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('üîÑ Flow Step 4: Order completed ‚úÖ');",
									"    console.log('üéâ FULL ORDER FLOW TEST COMPLETED SUCCESSFULLY!');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{sellerAccessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orderStatus\": \"COMPLETED\",\n  \"internalNotes\": \"Flow test: Order completed - COD payment received\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/seller/orders/{{flowTestOrderId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"seller",
								"orders",
								"{{flowTestOrderId}}",
								"status"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}